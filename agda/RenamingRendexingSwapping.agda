module RenamingRendexingSwapping where

open import Prelude
open import Unfinite
open import oc-Sets
open import Freshness
open import LocalClosedness
open import Support
open import AbstractionConcretion

----------------------------------------------------------------------
-- Lemma 2.16
----------------------------------------------------------------------
module _
  {X : Set}
  {{_ : lns X}}
  {a b : ùî∏}
  {i j : ‚Ñï}
  {x : X}
  where
  ~><~ : -- Equation (19)
    (p : i ‚âª x)
    (q : j ‚âª x)
    ‚Üí ---------------------------------------
    (i ~> b)((i <~ a)x) ‚â° (j ~> b)((j <~ a)x)
  ~><~ p q  =
    proof
      (i ~> b)((i <~ a)x)
    ‚â°[ ap ((i ~> b) ‚àò (i <~ a)) (symm (‚âª3 q ‚â§refl)) ]
      (i ~> b)((i <~ a)((j ~> b)x))
    ‚â°[ oc‚Çà _ _ _ _ _ ]
      (j ~> b)((j <~ a)((i ~> a)x))
    ‚â°[ ap ((j ~> b) ‚àò (j <~ a)) (‚âª3 p ‚â§refl) ]
      (j ~> b)((j <~ a)x)
    qed

  <~~> : -- Equation (20)
    (p : a # x)
    (q : b # x)
    ‚Üí ---------------------------------------
    (j <~ a)((i ~> a)x) ‚â° (j <~ b)((i ~> b)x)
  <~~> p q =
    proof
      (j <~ a)((i ~> a)x)
    ‚â°[ ap ((j <~ a) ‚àò (i ~> a)) (symm (#2 q)) ]
      (j <~ a)((i ~> a)((j <~ b)x))
    ‚â°[ oc‚Çâ _ _ _ _ _ ]
      (j <~ b)((i ~> b)((i <~ a)x))
    ‚â°[ ap ((j <~ b) ‚àò (i ~> b)) (#2 p) ]
      (j <~ b)((i ~> b)x)
    qed

----------------------------------------------------------------------
-- Renaming
----------------------------------------------------------------------
infix 5 _‚Ü§_
_‚Ü§_ : {X : Set}{{_ : lns X}} ‚Üí ùî∏ ‚Üí ùî∏ ‚Üí X ‚Üí X
(b ‚Ü§ a)x =
  let i = œÄ‚ÇÅ (isupp x) in
  (i ~> b)((i <~ a)x) -- Equation(21)

‚Ü§fresh :
  {X : Set}
  {{_ : lns X}}
  {a b : ùî∏}
  (x : X)
  (i : ‚Ñï)
  (_ : i ‚âª x)
  ‚Üí ----------------------------
  (b ‚Ü§ a)x ‚â° (i ~> b)((i <~ a)x)
‚Ü§fresh x i p = ~><~ (œÄ‚ÇÇ (isupp x)) p

----------------------------------------------------------------------
-- Re-indexing
----------------------------------------------------------------------
infix 5 _‚Ü¶_
_‚Ü¶_ : {X : Set}{{_ : lns X}} ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí X ‚Üí X
(i ‚Ü¶ j)x =
  let a = new (–òe‚ÇÅ (asupp x)) in
  (j <~ a)((i ~> a)x) -- Equation (22)

‚Ü¶fresh :
  {X : Set}
  {{_ : lns X}}
  {i j : ‚Ñï}
  (x : X)
  (a : ùî∏)
  {{_ : a # x}}
  ‚Üí ----------------------------
  (i ‚Ü¶ j)x ‚â° (j <~ a)((i ~> a)x)
‚Ü¶fresh x a =
  let
    bs = –òe‚ÇÅ (asupp x)
    b  = new bs
    b#x : b # x
    b#x = –òe‚ÇÇ (asupp x) b {{unfinite bs}}
  in <~~> b#x it

‚âª‚Ü¶ :
  {X : Set}
  {{_ : lns X}}
  (i j : ‚Ñï)
  (x : X)
  ‚Üí ------------------
  i ‚âª x ‚Üí (i ‚Ü¶ j)x ‚â° x
‚âª‚Ü¶ i j x p =
  let
    as = –òe‚ÇÅ (asupp x)
    a  = new as
    instance
      _ : a # x
      _ = –òe‚ÇÇ (asupp x) a {{unfinite as}}
  in
  proof
    (i ‚Ü¶ j)x
  ‚â°[]
    (j <~ a)((i ~> a)x)
  ‚â°[ ap (j <~ a) (‚âª3 p ‚â§refl) ]
     (j <~ a)x
  ‚â°[ #2 it ]
    x
  qed

----------------------------------------------------------------------
-- Renset properties of renaming [Proposition 2.17]
----------------------------------------------------------------------
module _ {X : Set}{{_ : lns X}}{x : X} where
  rn‚ÇÅ : -- Equation (23)
    {a : ùî∏}
    ‚Üí ----------
    (a ‚Ü§ a)x ‚â° x
  rn‚ÇÅ {a} =
    let
      i = œÄ‚ÇÅ (isupp x)
      i‚âªx : i ‚âª x
      i‚âªx = œÄ‚ÇÇ(isupp x)
    in
    proof
      (a ‚Ü§ a)x
    ‚â°[]
      (i ~> a)((i <~ a)x)
    ‚â°[ oc‚ÇÑ _ _ _ ]
      (i ~> a)x
    ‚â°[ ‚âª3 i‚âªx ‚â§refl ]
      x
    qed

  rn‚ÇÇ : -- Equation (24)
    {a b c : ùî∏}
    {{_ : a ‚â† c}}
    ‚Üí --------------------------
    (b ‚Ü§ a)((c ‚Ü§ a)x) ‚â° (c ‚Ü§ a)x
  rn‚ÇÇ {a} {b} {c} =
    proof
      (b ‚Ü§ a)((c ‚Ü§ a)x)
    ‚â°[]
      (j ~> b)((j <~ a)((i ~> c)((i <~ a)x)))
    ‚â°[ ~><~ q (‚âª1 ‚â§max‚ÇÇ q) ]
      (k ~> b)((k <~ a)((i ~> c)((i <~ a)x)))
    ‚â°[ ap ((k ~> b) ‚àò (k <~ a)) (~><~ p (‚âª1 ‚â§max‚ÇÅ p)) ]
      (k ~> b)((k <~ a)((k ~> c)((k <~ a)x)))
    ‚â°[ ap (k ~> b) (#2 r) ]
      (k ~> b)((k ~> c)((k <~ a)x))
    ‚â°[ oc‚ÇÅ _ _ _ _ ]
      (k ~> c)((k <~ a)x)
    ‚â°[ ~><~ (‚âª1 ‚â§max‚ÇÅ p) p ]
      (c ‚Ü§ a)x
    qed
    where
    i = œÄ‚ÇÅ (isupp x)
    p : i ‚âª x
    p = œÄ‚ÇÇ (isupp x)
    j = œÄ‚ÇÅ (isupp ((i ~> c)((i <~ a)x)))
    q : j ‚âª (i ~> c)((i <~ a)x)
    q = œÄ‚ÇÇ (isupp ((i ~> c)((i <~ a)x)))
    k = max i j
    A = –òe‚ÇÅ (asupp x) -- atom-supports x
    s : (A -[ a ]) ‚à™ [ c ] atom-supports (k ~> c)((k <~ a)x)
    s = ~>atom-supports (<~atom-supports Œª a' p' ‚Üí
      –òe‚ÇÇ (asupp x) a' {{p'}})
    r : a # (k ~> c)((k <~ a)x)
    r = s a (‚àâ‚à™{{p = x‚àâxs-[x] A}}{{‚àâ[]}})

  rn‚ÇÉ : -- Equation (25)
    {a b c : ùî∏}
    ‚Üí -----------------------------------
    (c ‚Ü§ b)((b ‚Ü§ a)x) ‚â° (c ‚Ü§ a)((c ‚Ü§ b)x)
  rn‚ÇÉ {a} {b} {c} =
    proof
      (c ‚Ü§ b)((b ‚Ü§ a)x)
    ‚â°[]
      (j ~> c)((j <~ b)((i ~> b)((i <~ a)x)))
    ‚â°[ ~><~ q (‚âª1 (‚â§trans (‚â§max‚ÇÇ {i}) ‚â§max‚ÇÅ) q) ]
      (k ~> c)((k <~ b)((i ~> b)((i <~ a)x)))
    ‚â°[ ap ((k ~> c) ‚àò (k <~ b))
       (~><~ p (‚âª1 (‚â§trans (‚â§max‚ÇÅ {i}) ‚â§max‚ÇÅ) p)) ]
      (k ~> c)((k <~ b)((k ~> b)((k <~ a)x)))
    ‚â°[ ap (k ~> c) (oc‚Çâ _ _ _ _ _) ]
      (k ~> c)((k <~ a)((k ~> a)((k <~ b)x)))
    ‚â°[ symm (oc‚Çà _ _ _ _ _) ]
      (k ~> c)((k <~ a)((k ~> c)((k <~ b)x)))
    ‚â°[ ap ((k ~> c) ‚àò (k <~ a))
      (~><~ (‚âª1 (‚â§trans ‚â§max‚ÇÅ ‚â§max‚ÇÅ) p) p) ]
      (k ~> c)((k <~ a)((i ~> c)((i <~ b)x)))
    ‚â°[ ~><~ (‚âª1 ‚â§max‚ÇÇ q') q' ]
      (j' ~> c)((j' <~ a)((i ~> c)((i <~ b)x)))
    ‚â°[]
      (c ‚Ü§ a)((c ‚Ü§ b)x)
    qed
    where
    i = œÄ‚ÇÅ (isupp x)
    p : i ‚âª x
    p = œÄ‚ÇÇ (isupp x)
    j = œÄ‚ÇÅ (isupp ((i ~> b)((i <~ a)x)))
    q : j ‚âª (i ~> b)((i <~ a)x)
    q = œÄ‚ÇÇ (isupp ((i ~> b)((i <~ a)x)))
    j' = œÄ‚ÇÅ (isupp ((i ~> c)((i <~ b)x)))
    q' : j' ‚âª (i ~> c)((i <~ b)x)
    q' = œÄ‚ÇÇ (isupp ((i ~> c)((i <~ b)x)))
    k = max (max i j) j'

  rn‚ÇÑ : -- Equation (26)
    {a b a' b' : ùî∏}
    {{_ : b  ‚â† a'}}
    {{_ : a  ‚â† a'}}
    {{_ : b' ‚â† a }}
    ‚Üí ---------------------------------------
    (b ‚Ü§ a)((b' ‚Ü§ a')x) ‚â° (b' ‚Ü§ a')((b ‚Ü§ a)x)
  rn‚ÇÑ {a} {b} {a'} {b'} =
    proof
      (b ‚Ü§ a)((b' ‚Ü§ a')x)
    ‚â°[]
      (j' ~> b)((j' <~ a)((i ~> b')((i <~ a')x)))
    ‚â°[ ~><~ q' (‚âª1 ‚â§max‚ÇÇ q') ]
      (k' ~> b)((k' <~ a)((i ~> b')((i <~ a')x)))
    ‚â°[ ap ((k' ~> b) ‚àò (k' <~ a)) (~><~ p (‚âª1 ‚â§max‚ÇÅ p)) ]
      (k' ~> b)((k' <~ a)((k ~> b')((k <~ a')x)))
    ‚â°[ ap (k' ~> b) (symm (oc‚Çá _ _ _ _ _ {{symm‚â† k' k k'‚â†k}})) ]
      (k' ~> b)((k ~> b')((k' <~ a)((k <~ a')x)))
    ‚â°[ oc‚ÇÖ _ _ _ _ _ {{k'‚â†k}} ]
      (k ~> b')((k' ~> b)((k' <~ a)((k <~ a')x)))
    ‚â°[ ap ((k ~> b') ‚àò (k' ~> b)) (oc‚ÇÜ _ _ _ _ _) ]
      (k ~> b')((k' ~> b)((k <~ a')((k' <~ a)x)))
    ‚â°[ ap (k ~> b') (oc‚Çá _ _ _ _ _ {{k'‚â†k}}) ]
      (k ~> b')((k <~ a')((k' ~> b)((k' <~ a)x)))
    ‚â°[ ap ((k ~> b') ‚àò (k <~ a')) (~><~ (‚âª1 i‚â§k' p) p) ]
      (k ~> b')((k <~ a')((i ~> b)((i <~ a)x)))
    ‚â°[ ~><~ (‚âª1 ‚â§max‚ÇÇ q) q ]
      (j ~> b')((j <~ a')((i ~> b)((i <~ a)x)))
    ‚â°[]
      (b' ‚Ü§ a')((b ‚Ü§ a)x)
    qed
    where
    i = œÄ‚ÇÅ (isupp x)
    p : i ‚âª x
    p = œÄ‚ÇÇ (isupp x)
    j = œÄ‚ÇÅ (isupp ((i ~> b)((i <~ a)x)))
    q : j ‚âª (i ~> b)((i <~ a)x)
    q = œÄ‚ÇÇ (isupp ((i ~> b)((i <~ a)x)))
    j' = œÄ‚ÇÅ (isupp ((i ~> b')((i <~ a')x)))
    q' : j' ‚âª (i ~> b')((i <~ a')x)
    q' = œÄ‚ÇÇ (isupp ((i ~> b')((i <~ a')x)))
    k = max i j
    k' = max (k +1) j'
    i‚â§k' : i ‚â§ k'
    i‚â§k' = ‚â§trans (‚â§max‚ÇÅ{y = j}) (‚â§trans (‚â§+1 ‚â§refl) (‚â§max‚ÇÅ{y = j'}))
    k'‚â†k : k' ‚â† k
    k'‚â†k = +1‚â§‚Üí‚â† k k' (‚â§max‚ÇÅ {y = j'})

----------------------------------------------------------------------
-- Freshness for rensets [Lemma 2.18, Corollary 2.19]
----------------------------------------------------------------------
module _
  {X : Set}
  {{_ : lns X}}
  {x : X}
  {a : ùî∏}
  where
  #‚Üíren# : -- Equation (28), first implication
    (_ : a # x)
    (b : ùî∏)
    ‚Üí ----------
    (b ‚Ü§ a)x ‚â° x
  #‚Üíren# a#x b =
    proof
      (b ‚Ü§ a) x
    ‚â°[]
      (i ~> b)((i <~ a)x)
    ‚â°[ ap (i ~> b) (#2 a#x) ]
      (i ~> b)x
    ‚â°[ ‚âª3 p ‚â§refl ]
      x
    qed
    where
    i = œÄ‚ÇÅ (isupp x)
    p : i ‚âª x
    p = œÄ‚ÇÇ (isupp x)

  ‚àÄ‚Üí–ò : -- Equation (28), second implication
    (‚àÄ b ‚Üí (b ‚Ü§ a)x ‚â° x)
    ‚Üí --------------------
    –ò b ‚à∂ ùî∏ , (b ‚Ü§ a)x ‚â° x
  ‚àÄ‚Üí–ò p = –òi √ò Œª b ‚Üí p b

  ren#‚Üí# : -- Equation (28), third implication
    (_ : –ò b ‚à∂ ùî∏ , (b ‚Ü§ a)x ‚â° x)
    ‚Üí --------------------------
    a # x
  ren#‚Üí# p = #3 {a = a}{x}{i}
   (proof
      (i <~ a) x
    ‚â°[ ap (i <~ a) (symm (‚âª3 q ‚â§refl)) ]
      (i <~ a)((i ~> a)x)
    ‚â°[ ap ((i <~ a) ‚àò (i ~> a)) (symm (#2 b#x)) ]
      (i <~ a)((i ~> a)((i <~ b)x))
    ‚â°[ oc‚Çâ _ _ _ _ _ ]
      (i <~ b)((i ~> b)((i <~ a)x))
    ‚â°[ ap (i <~ b) (–òe‚ÇÇ p b {{b‚àâA}}) ]
      (i <~ b)x
    ‚â°[ #2 b#x ]
      x
    qed)
    where
    A = –òe‚ÇÅ p
    b : ùî∏
    b = new (A ‚à™ –òe‚ÇÅ (asupp x))
    b#x : b # x
    b#x = –òe‚ÇÇ (asupp x) b {{‚àâ‚à™‚ÇÇ (unfinite (A ‚à™ –òe‚ÇÅ (asupp x)))}}
    b‚àâA : b ‚àâ A
    b‚àâA = ‚àâ‚à™‚ÇÅ (unfinite (A ‚à™ –òe‚ÇÅ (asupp x)))
    i = œÄ‚ÇÅ (isupp x)
    q : i ‚âª x
    q = œÄ‚ÇÇ (isupp x)

#‚Ü§ : -- Corollary 2.19
  {X : Set}
  {{_ : lns X}}
  (x : X)
  (a b c : ùî∏)
  {{_ : c # x}}
  {{_ : c ‚â† b}}
  ‚Üí -----------
  c # (b ‚Ü§ a)x
#‚Ü§ x a b c with b ‚âê a
... | equ rewrite rn‚ÇÅ {x = x} {a} = it
... | neq f = ren#‚Üí# {x = (b ‚Ü§ a)x} {c} (–òi [ a ] –∏‚ÇÇ)
  where
  –∏‚ÇÇ :
    (d : ùî∏)
    {{_ : d ‚àâ [ a ]}}
    ‚Üí ----------------------------
    (d ‚Ü§ c)((b ‚Ü§ a) x) ‚â° (b ‚Ü§ a) x
  –∏‚ÇÇ d {{‚àâ[]}} with c ‚âê a
  ... | equ = rn‚ÇÇ
  ... | neq g =
    proof
      (d ‚Ü§ c)((b ‚Ü§ a) x)
    ‚â°[ rn‚ÇÑ {a = c} {d} {a} {b} {{it}} {{¬¨‚â°‚Üí‚â† g}} {{symm‚â† c b it}} ]
      (b ‚Ü§ a)((d ‚Ü§ c) x)
    ‚â°[ ap (b ‚Ü§ a) (#‚Üíren# it d) ]
      (b ‚Ü§ a) x
    qed

#‚Ü§' :
  {X : Set}
  {{_ : lns X}}
  (x : X)
  (a b : ùî∏)
  {{_ : a ‚â† b}}
  ‚Üí -----------
  a # (b ‚Ü§ a)x
#‚Ü§' x a b = ren#‚Üí# (–òi √ò Œª _ ‚Üí rn‚ÇÇ)

ren-supp : -- Remark 2.20
  {X : Set}
  {{_ : lns X}}
  (x : X)
  ‚Üí ------------------------------
  –ò a ‚à∂ ùî∏ , –ò b ‚à∂ ùî∏ , (b ‚Ü§ a)x ‚â° x
ren-supp x =
  –òi (–òe‚ÇÅ (asupp x)) Œª a ‚Üí –òi √ò Œª b ‚Üí #‚Üíren# (–òe‚ÇÇ (asupp x) a) b

----------------------------------------------------------------------
-- Name-name swapping [Equation (29)]
----------------------------------------------------------------------
module _ {X : Set}{{_ : lns X}} where
  infix 5 _‚âÄ‚Çê‚Çê_
  _‚âÄ‚Çê‚Çê_ : {X : Set}{{_ : lns X}} ‚Üí ùî∏ ‚Üí ùî∏ ‚Üí X ‚Üí X
  (a ‚âÄ‚Çê‚Çê b)x =
    let c = new ([ a ] ‚à™ [ b ] ‚à™ –òe‚ÇÅ (asupp x)) in
    (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x))

  ‚âÄ‚Çê‚Çêwelldef :
    (a b c c' : ùî∏)
    (x : X)
    {{_ : c # x}}
    {{_ : c ‚â† a}}
    {{_ : c ‚â† b}}
    {{_ : c' # x}}
    {{_ : c' ‚â† a}}
    {{_ : c' ‚â† b}}
    ‚Üí --------------------------
    (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x)) ‚â°
    (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)x))
  ‚âÄ‚Çê‚Çêwelldef a b c c' x with c' ‚âê c
  ... | equ = refl
  ... | neq f =
    proof
      (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x))
    ‚â°[ ap (b ‚Ü§ c) (symm (#‚Üíren# (#‚Ü§
      ((c ‚Ü§ a)x) b a c' {{#‚Ü§ x a c c' {{it}}{{¬¨‚â°‚Üí‚â†  f}}}}) b)) ]
      (b ‚Ü§ c)((b ‚Ü§ c')((a ‚Ü§ b)((c ‚Ü§ a)x)))
    ‚â°[ symm rn‚ÇÉ ]
      (b ‚Ü§ c')((c' ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x)))
    ‚â°[ ap (b ‚Ü§ c') (rn‚ÇÑ {a = c} {c'} {b} {a} {{it}}{{it}}{{symm‚â† c a it}}) ]
      (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ c)((c ‚Ü§ a)x)))
    ‚â°[ ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b)) rn‚ÇÉ ]
      (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)((c' ‚Ü§ c)x)))
    ‚â°[ ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b) ‚àò (c' ‚Ü§ a)) (#‚Üíren# it c') ]
      (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)x))
    qed

  ‚âÄ‚Çê‚Çêfresh :
    (a b c : ùî∏)
    (x : X)
    {{_ : c # x}}
    {{_ : c ‚â† a}}
    {{_ : c ‚â† b}}
    ‚Üí -------------------------------------
    (a ‚âÄ‚Çê‚Çê b)x ‚â° (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x))
  ‚âÄ‚Çê‚Çêfresh  a b c x =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ –òe‚ÇÅ (asupp x)
      d = new as
      instance
        _ : d # x
        _ = –òe‚ÇÇ (asupp x) d {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as))}}
        _ : d ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as))
        _ : d ‚â† b
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as)))
    in ‚âÄ‚Çê‚Çêwelldef a b d c x

  #‚âÄ‚Çê‚Çê :
    (a b c : ùî∏)
    (x : X)
    {{_ : c # x}}
    {{_ : c ‚â† a}}
    {{_ : c ‚â† b}}
    ‚Üí ------------
    c # (a ‚âÄ‚Çê‚Çê b)x
  #‚âÄ‚Çê‚Çê a b c x rewrite ‚âÄ‚Çê‚Çêfresh a b c x {{it}}{{it}}{{it}} = #‚Ü§' _ c b

  --------------------------------------------------------------------
  -- Properties of name-swapping and renaming [Lemma 2.21]
  --------------------------------------------------------------------
  ts‚ÇÅ : -- Equation (31)
    {x : X}
    {a : ùî∏}
    ‚Üí ------------
    (a ‚âÄ‚Çê‚Çê a)x ‚â° x
  ts‚ÇÅ {x} {a} =
    let
      as = [ a ] ‚à™ –òe‚ÇÅ (asupp x)
      c = new as
      instance
        _ : c # x
        _ = –òe‚ÇÇ (asupp x) c {{‚àâ‚à™‚ÇÇ (unfinite as)}}
        _ : c ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as))
    in
    proof
      (a ‚âÄ‚Çê‚Çê a) x
    ‚â°[ ‚âÄ‚Çê‚Çêfresh a a c x ]
      (a ‚Ü§ c)((a ‚Ü§ a)((c ‚Ü§ a)x))
    ‚â°[ ap (a ‚Ü§ c) rn‚ÇÅ ]
      (a ‚Ü§ c)((c ‚Ü§ a)x)
    ‚â°[ rn‚ÇÉ ]
      (a ‚Ü§ a)((a ‚Ü§ c)x)
    ‚â°[ rn‚ÇÅ ]
      (a ‚Ü§ c)x
    ‚â°[ #‚Üíren# it a ]
      x
    qed

  ts‚ÇÇ : -- Equation (32)
    {x : X}
    {a b : ùî∏}
    ‚Üí -----------------------
    (a ‚âÄ‚Çê‚Çê b)((a ‚âÄ‚Çê‚Çê b)x) ‚â° x
  ts‚ÇÇ {x} {a} {b} with  a ‚âê b
  ... | equ = ts‚ÇÅ Ôºõ ts‚ÇÅ
  ... | neq f =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ –òe‚ÇÅ (asupp x)
      c = new as
      as' = [ c ] ‚à™ as
      c' = new as'
      instance
        _ : c' # x
        _ = –òe‚ÇÇ (asupp x) c' {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as')))}}
        _ : c' ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as')))
        _ : c' ‚â† b
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as'))))
        _ : c' # (a ‚âÄ‚Çê‚Çê b)x
        _ = #‚âÄ‚Çê‚Çê a b c' x
        _ : c' ‚â† c
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ(unfinite as'))
        _ : a ‚â† c
        _ = symm‚â† c a (‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as)))
        _ : b ‚â† a
        _ = symm‚â† a b (¬¨‚â°‚Üí‚â†  f)
        _ : b ‚â† c
        _ = symm‚â† c b (‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as))))
        _ : c # x
        _ = –òe‚ÇÇ (asupp x) c {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as))}}
    in
    proof
      (a ‚âÄ‚Çê‚Çê b)((a ‚âÄ‚Çê‚Çê b)x)
    ‚â°[ ‚âÄ‚Çê‚Çêfresh a b c' ((a ‚âÄ‚Çê‚Çê b)x) ]
      (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)((a ‚âÄ‚Çê‚Çê b)x)))
    ‚â°[]
      (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)((b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x)))))
    ‚â°[ ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = a} {c'} {c} {b}) ]
       (b ‚Ü§ c')((a ‚Ü§ b)((b ‚Ü§ c)((c' ‚Ü§ a)((a ‚Ü§ b)((c ‚Ü§ a)x)))))
    ‚â°[ ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b) ‚àò (b ‚Ü§ c)) rn‚ÇÉ ]
       (b ‚Ü§ c')((a ‚Ü§ b)((b ‚Ü§ c)((c' ‚Ü§ b)((c' ‚Ü§ a)((c ‚Ü§ a)x)))))
    ‚â°[ ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b) ‚àò (b ‚Ü§ c) ‚àò (c' ‚Ü§ b))
       (rn‚ÇÇ {a = a}{c'}{c}) ]
      (b ‚Ü§ c')((a ‚Ü§ b)((b ‚Ü§ c)((c' ‚Ü§ b)((c ‚Ü§ a)x))))
    ‚â°[ ap (b ‚Ü§ c') rn‚ÇÉ ]
      (b ‚Ü§ c')((a ‚Ü§ c)((a ‚Ü§ b)((c' ‚Ü§ b)((c ‚Ü§ a)x))))
    ‚â°[ ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ c))
       (rn‚ÇÇ {a = b}{a}{c'} {{symm‚â† c' b it}}) ]
      (b ‚Ü§ c')((a ‚Ü§ c)((c' ‚Ü§ b)((c ‚Ü§ a)x)))
    ‚â°[ rn‚ÇÑ {a = c'} {b} {c} {a} {{it}}{{it}}{{symm‚â† c' a it}} ]
      (a ‚Ü§ c)((b ‚Ü§ c')((c' ‚Ü§ b)((c ‚Ü§ a)x)))
    ‚â°[ ap (a ‚Ü§ c) rn‚ÇÉ ]
      (a ‚Ü§ c)((b ‚Ü§ b)((b ‚Ü§ c')((c ‚Ü§ a)x)))
    ‚â°[ ap (a ‚Ü§ c) rn‚ÇÅ ]
      (a ‚Ü§ c)((b ‚Ü§ c')((c ‚Ü§ a)x))
    ‚â°[ rn‚ÇÑ {a = c} {a} {c'} {b} {{symm‚â† c' a it}} {{symm‚â† c' c it}} ]
      (b ‚Ü§ c')((a ‚Ü§ c)((c ‚Ü§ a)x))
    ‚â°[ ap (b ‚Ü§ c') rn‚ÇÉ ]
      (b ‚Ü§ c')((a ‚Ü§ a)((a ‚Ü§ c)x))
    ‚â°[ ap (b ‚Ü§ c') rn‚ÇÅ ]
      (b ‚Ü§ c')((a ‚Ü§ c)x)
    ‚â°[ ap (b ‚Ü§ c') (#‚Üíren# it a) ]
      (b ‚Ü§ c')x
    ‚â°[ #‚Üíren# it b ]
      x
    qed

  ts‚ÇÉ : -- Equation (33)
    {x : X}
    {a b c d : ùî∏}
    {{_ : b ‚â† c}}
    {{_ : c ‚â† a}}
    {{_ : a ‚â† d}}
    {{_ : d ‚â† b}}
    ‚Üí -------------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((c ‚âÄ‚Çê‚Çê d)x) ‚â° (c ‚âÄ‚Çê‚Çê d)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚ÇÉ {x} {a} {b} {c} {d} =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ [ d ] ‚à™ –òe‚ÇÅ (asupp x)
      e = new as
      as' = [ e ] ‚à™ as
      e' = new as'
      instance
        _ : e # x
        _ = –òe‚ÇÇ (asupp x) e {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as))))}}
        _ : e ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as))
        _ : e ‚â† b
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as)))
        _ : e ‚â† c
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as))))
        _ : e ‚â† d
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as)))))
        _ : e # (c ‚âÄ‚Çê‚Çê d)x
        _ = #‚âÄ‚Çê‚Çê c d e x
        _ : e' # x
        _ = –òe‚ÇÇ (asupp x) e' {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as')))))}}
        _ : e' ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as')))
        _ : e' ‚â† b
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as'))))
        _ : e' ‚â† c
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as')))))
        _ : e' ‚â† d
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as'))))))
        _ : e' # (a ‚âÄ‚Çê‚Çê b)x
        _ = #‚âÄ‚Çê‚Çê a b e' x
        _ : e ‚â† e'
        _ = symm‚â† e' e (‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as')))
        _ : a ‚â† e'
        _ = symm‚â† e' a it
        _ : d ‚â† a
        _ = symm‚â† a d it
        _ : b ‚â† e'
        _ = symm‚â† e' b it
        _ : d ‚â† e
        _ = symm‚â† e d it
        _ : b ‚â† d
        _ = symm‚â† d b it
        _ : c ‚â† b
        _ = symm‚â† b c it
        _ : c ‚â† e
        _ = symm‚â† e c it
        _ : a ‚â† c
        _ = symm‚â† c a it
        _ : e' ‚â† e
        _ = symm‚â† e e' it
    in
    proof
      (a ‚âÄ‚Çê‚Çê b)((c ‚âÄ‚Çê‚Çê d)x)
    ‚â°[ ‚âÄ‚Çê‚Çêfresh a b e ((c ‚âÄ‚Çê‚Çê d)x) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((c ‚âÄ‚Çê‚Çê d)x)))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (e ‚Ü§ a)) (‚âÄ‚Çê‚Çêfresh c d e' x) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((d ‚Ü§ e')((c ‚Ü§ d)((e' ‚Ü§ c)x)))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = a} {e} {e'} {d}) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((d ‚Ü§ e')((e ‚Ü§ a)((c ‚Ü§ d)((e' ‚Ü§ c)x)))))
    ‚â°[ ap (b ‚Ü§ e) (rn‚ÇÑ {a = b} {a} {e'} {d} ) ]
      (b ‚Ü§ e)((d ‚Ü§ e')((a ‚Ü§ b)((e ‚Ü§ a)((c ‚Ü§ d)((e' ‚Ü§ c)x)))))
    ‚â°[ rn‚ÇÑ {a = e} {b} {e'} {d} ]
      (d ‚Ü§ e')((b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((c ‚Ü§ d)((e' ‚Ü§ c)x)))))
    ‚â°[ ap ((d ‚Ü§ e') ‚àò (b ‚Ü§ e) ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = a} {e} {d} {c}) ]
      (d ‚Ü§ e')((b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ d)((e ‚Ü§ a)((e' ‚Ü§ c)x)))))
    ‚â°[ ap ((d ‚Ü§ e') ‚àò (b ‚Ü§ e)) (rn‚ÇÑ {a = b} {a} {d} {c}) ]
      (d ‚Ü§ e')((b ‚Ü§ e)((c ‚Ü§ d)((a ‚Ü§ b)((e ‚Ü§ a)((e' ‚Ü§ c)x)))))
    ‚â°[ ap (d ‚Ü§ e') (rn‚ÇÑ {a = e} {b} {d} {c}) ]
      (d ‚Ü§ e')((c ‚Ü§ d)((b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((e' ‚Ü§ c)x)))))
    ‚â°[ ap ((d ‚Ü§ e') ‚àò (c ‚Ü§ d) ‚àò (b ‚Ü§ e) ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = a} {e} {c} {e'}) ]
      (d ‚Ü§ e')((c ‚Ü§ d)((b ‚Ü§ e)((a ‚Ü§ b)((e' ‚Ü§ c)((e ‚Ü§ a)x)))))
    ‚â°[ ap ((d ‚Ü§ e') ‚àò (c ‚Ü§ d) ‚àò (b ‚Ü§ e)) (rn‚ÇÑ {a = b} {a} {c} {e'}) ]
      (d ‚Ü§ e')((c ‚Ü§ d)((b ‚Ü§ e)((e' ‚Ü§ c)((a ‚Ü§ b)((e ‚Ü§ a)x)))))
    ‚â°[ ap ((d ‚Ü§ e') ‚àò (c ‚Ü§ d)) (rn‚ÇÑ {a = e} {b} {c} {e'}) ]
      (d ‚Ü§ e')((c ‚Ü§ d)((e' ‚Ü§ c)((b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)x)))))
    ‚â°[ ap ((d ‚Ü§ e') ‚àò (c ‚Ü§ d) ‚àò (e' ‚Ü§ c)) (symm (‚âÄ‚Çê‚Çêfresh a b e x)) ]
      (d ‚Ü§ e')((c ‚Ü§ d)((e' ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)))
    ‚â°[ symm (‚âÄ‚Çê‚Çêfresh c d e' ((a ‚âÄ‚Çê‚Çê b)x)) ]
      (c ‚âÄ‚Çê‚Çê d)((a ‚âÄ‚Çê‚Çê b)x)
    qed

  ts‚ÇÑ : -- Equation (34)
    {x : X}
    {a b c : ùî∏}
    {{_ : b ‚â† c}}
    {{_ : c ‚â† a}}
    ‚Üí -------------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((c ‚âÄ‚Çê‚Çê a)x) ‚â° (c ‚âÄ‚Çê‚Çê b)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚ÇÑ {x} {a} {b} {c} with b ‚âê a
  ... | equ =
    proof
      (a ‚âÄ‚Çê‚Çê a)((c ‚âÄ‚Çê‚Çê a)x)
    ‚â°[ ts‚ÇÅ ]
      (c ‚âÄ‚Çê‚Çê a)x
    ‚â°[ ap (c ‚âÄ‚Çê‚Çê a) (symm ts‚ÇÅ) ]
      (c ‚âÄ‚Çê‚Çê a)((a ‚âÄ‚Çê‚Çê a)x)
    qed
  ... | neq f =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ –òe‚ÇÅ (asupp x)
      e = new as
      as' = [ e ] ‚à™ as
      e' = new as'
      instance
        _ : e # x
        _ = –òe‚ÇÇ (asupp x) e {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as)))}}
        _ : e ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as))
        _ : e ‚â† b
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as)))
        _ : e ‚â† c
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as))))
        _ : e # (c ‚âÄ‚Çê‚Çê a)x
        _ = #‚âÄ‚Çê‚Çê c a e x
        _ : e' # x
        _ = –òe‚ÇÇ (asupp x) e' {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as'))))}}
        _ : e' ‚â† c
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as')))))
        _ : e' ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as')))
        _ : e' # x
        _ = –òe‚ÇÇ (asupp x) e' {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as'))))}}
        _ : e' ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as')))
        _ : e' ‚â† b
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as'))))
        _ : e # (a ‚âÄ‚Çê‚Çê b)x
        _ = #‚âÄ‚Çê‚Çê a b e x
        _ : a ‚â† e'
        _ = symm‚â† e' a it
        _ : b ‚â† e'
        _ = symm‚â† e' b it
        _ : a ‚â† c
        _ = symm‚â† c a it
        _ : e' ‚â† e
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as'))
        _ : e ‚â† e'
        _ = symm‚â† e' e it
        _ : c ‚â† e'
        _ = symm‚â† e' c it
        _ : c ‚â† b
        _ = symm‚â† b c it
        _ : b ‚â† a
        _ = ¬¨‚â°‚Üí‚â†  f
    in
    proof
      (a ‚âÄ‚Çê‚Çê b)((c ‚âÄ‚Çê‚Çê a)x)
    ‚â°[ ‚âÄ‚Çê‚Çêfresh a b e ((c ‚âÄ‚Çê‚Çê a)x) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((c ‚âÄ‚Çê‚Çê a)x)))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (e ‚Ü§ a)) (‚âÄ‚Çê‚Çêfresh c a e' x) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((a ‚Ü§ e')((c ‚Ü§ a)((e' ‚Ü§ c)x)))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b)) rn‚ÇÉ ]
      (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ e')((e ‚Ü§ a)((c ‚Ü§ a)((e' ‚Ü§ c)x)))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (e ‚Ü§ e')) (rn‚ÇÇ {a = a} {e} {c}) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ e')((c ‚Ü§ a)((e' ‚Ü§ c)x))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = e'} {e} {a} {c}) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ a)((e ‚Ü§ e')((e' ‚Ü§ c)x))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (c ‚Ü§ a)) rn‚ÇÉ ]
      (b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ a)((e ‚Ü§ c)((e ‚Ü§ e')x))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (c ‚Ü§ a) ‚àò (e ‚Ü§ c)) (#‚Üíren# it e) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ a)((e ‚Ü§ c)x)))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (c ‚Ü§ a)) (symm (#‚Üíren# (#‚Ü§ x c e e') c)) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ a)((c ‚Ü§ e')((e ‚Ü§ c)x))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b)) (symm rn‚ÇÉ) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ e')((e' ‚Ü§ a)((e ‚Ü§ c)x))))
    ‚â°[ ap (b ‚Ü§ e) (symm (rn‚ÇÑ {a = e'} {c} {b} {a})) ]
      (b ‚Ü§ e)((c ‚Ü§ e')((a ‚Ü§ b)((e' ‚Ü§ a)((e ‚Ü§ c)x))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (c ‚Ü§ e')) (symm (rn‚ÇÇ {a = b} {c} {a})) ]
      (b ‚Ü§ e)((c ‚Ü§ e')((c ‚Ü§ b)((a ‚Ü§ b)((e' ‚Ü§ a)((e ‚Ü§ c)x)))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (c ‚Ü§ e') ‚àò (c ‚Ü§ b) ‚àò (a ‚Ü§ b)) (symm (rn‚ÇÑ {a = c} {e} {a} {e'})) ]
      (b ‚Ü§ e)((c ‚Ü§ e')((c ‚Ü§ b)((a ‚Ü§ b)((e ‚Ü§ c)((e' ‚Ü§ a)x)))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (c ‚Ü§ e') ‚àò (c ‚Ü§ b)) (symm (rn‚ÇÑ {a = c} {e} {b} {a})) ]
      (b ‚Ü§ e)((c ‚Ü§ e')((c ‚Ü§ b)((e ‚Ü§ c)((a ‚Ü§ b)((e' ‚Ü§ a)x)))))
    ‚â°[ ap (b ‚Ü§ e) (symm rn‚ÇÉ) ]
      (b ‚Ü§ e)((c ‚Ü§ b)((b ‚Ü§ e')((e ‚Ü§ c)((a ‚Ü§ b)((e' ‚Ü§ a)x)))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (c ‚Ü§ b)) (symm (rn‚ÇÑ {a = c} {e} {e'} {b})) ]
      (b ‚Ü§ e)((c ‚Ü§ b)((e ‚Ü§ c)((b ‚Ü§ e')((a ‚Ü§ b)((e' ‚Ü§ a)x)))))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (c ‚Ü§ b) ‚àò (e ‚Ü§ c)) (symm (‚âÄ‚Çê‚Çêfresh a b e' x)) ]
      (b ‚Ü§ e)((c ‚Ü§ b)((e ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)))
    ‚â°[ symm (‚âÄ‚Çê‚Çêfresh c b e ((a ‚âÄ‚Çê‚Çê b)x)) ]
      (c ‚âÄ‚Çê‚Çê b)((a ‚âÄ‚Çê‚Çê b)x)
    qed

  ts‚ÇÖ : -- Equation (35)
    {x : X}
    {a b c : ùî∏}
    {{_ : b ‚â† c}}
    ‚Üí -------------------------------------
    (c ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x) ‚â° (a ‚Ü§ b)((c ‚Ü§ a)x)
  ts‚ÇÖ {x} {a} {b} {c} with b ‚âê a
  ... | equ =
    proof
      (c ‚Ü§ a)((a ‚âÄ‚Çê‚Çê a)x)
    ‚â°[ ap (c ‚Ü§ a) ts‚ÇÅ ]
      (c ‚Ü§ a)x
    ‚â°[ symm rn‚ÇÅ ]
      (a ‚Ü§ a)((c ‚Ü§ a)x)
    qed
  ... | neq f =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ –òe‚ÇÅ (asupp x)
      d = new as
      instance
        _ : d # x
        _ = –òe‚ÇÇ (asupp x) d {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as)))}}
        _ : d ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as))
        _ : d ‚â† b
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as)))
        _ : b ‚â† a
        _ = ¬¨‚â°‚Üí‚â†  f
        _ : c ‚â† b
        _ = symm‚â† b c it
        _ : a ‚â† d
        _ = symm‚â† d a it
    in
    proof
      (c ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x)
    ‚â°[ ap (c ‚Ü§ b) (‚âÄ‚Çê‚Çêfresh a b d x) ]
      (c ‚Ü§ b)((b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)x)))
    ‚â°[ rn‚ÇÉ  ]
      (c ‚Ü§ d)((c ‚Ü§ b)((a ‚Ü§ b)((d ‚Ü§ a)x)))
    ‚â°[ ap (c ‚Ü§ d) (rn‚ÇÇ {a = b} {c} {a}) ]
      (c ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)x))
    ‚â°[ rn‚ÇÑ {a = d} {c} {b} {a} ]
      (a ‚Ü§ b)((c ‚Ü§ d)((d ‚Ü§ a)x))
    ‚â°[ ap (a ‚Ü§ b) rn‚ÇÉ ]
      (a ‚Ü§ b)((c ‚Ü§ a)((c ‚Ü§ d)x))
    ‚â°[ ap ((a ‚Ü§ b) ‚àò (c ‚Ü§ a)) (#‚Üíren# it c) ]
      (a ‚Ü§ b)((c ‚Ü§ a)x)
    qed

  ts‚ÇÜ : -- Equation (36)
    {x : X}
    {a b c d : ùî∏}
    {{_ : b ‚â† c}}
    {{_ : c ‚â† a}}
    {{_ : a ‚â† d}}
    {{_ : d ‚â† b}}
    ‚Üí ---------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((d ‚Ü§ c)x) ‚â° (d ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚ÇÜ {x} {a} {b} {c} {d} =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ [ d ] ‚à™ –òe‚ÇÅ (asupp x)
      e = new as
      instance
        _ : e # x
        _ = –òe‚ÇÇ (asupp x) e {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as))))}}
        _ : e ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as))
        _ : e ‚â† b
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as)))
        _ : e ‚â† c
        _ =  ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as))))
        _ : e ‚â† d
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as)))))
        _ : e # (d ‚Ü§ c)x
        _ = #‚Ü§ x c d e
        _ : a ‚â† c
        _ = symm‚â† c a it
        _ : d ‚â† a
        _ = symm‚â† a d it
        _ : d ‚â† e
        _ = symm‚â† e d it
    in
    proof
      (a ‚âÄ‚Çê‚Çê b)((d ‚Ü§ c)x)
    ‚â°[ ‚âÄ‚Çê‚Çêfresh a b e ((d ‚Ü§ c)x) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((d ‚Ü§ c)x)))
    ‚â°[ ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = a} {e} {c} {d}) ]
      (b ‚Ü§ e)((a ‚Ü§ b)((d ‚Ü§ c)((e ‚Ü§ a)x)))
    ‚â°[ ap (b ‚Ü§ e) (rn‚ÇÑ {a = b} {a} {c} {d}) ]
      (b ‚Ü§ e)((d ‚Ü§ c)((a ‚Ü§ b)((e ‚Ü§ a)x)))
    ‚â°[ rn‚ÇÑ {a = e} {b} {c} {d} ]
      (d ‚Ü§ c)((b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)x)))
    ‚â°[ ap (d ‚Ü§ c) (symm (‚âÄ‚Çê‚Çêfresh a b e x)) ]
      (d ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)
    qed

  ts‚Çá : -- Equation (37)
    {x : X}
    {a b c : ùî∏}
    {{_ : b ‚â† c}}
    {{_ : c ‚â† a}}
    ‚Üí ---------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((a ‚Ü§ c)x) ‚â° (b ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚Çá {x} {a} {b} {c} =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ –òe‚ÇÅ (asupp x)
      d = new as
      instance
        _ : d # x
        _ = –òe‚ÇÇ (asupp x) d {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as)))}}
        _ : d ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as))
        _ : d ‚â† b
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as)))
        _ : d ‚â† c
        _ =  ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as))))
        _ : d # (a ‚Ü§ c)x
        _ = #‚Ü§ x c a d
        _ :  a ‚â† c
        _ = symm‚â† c a it
    in
    proof
      (a ‚âÄ‚Çê‚Çê b)((a ‚Ü§ c)x)
    ‚â°[ ‚âÄ‚Çê‚Çêfresh a b d ((a ‚Ü§ c)x) ]
      (b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)((a ‚Ü§ c)x)))
    ‚â°[ ap ((b ‚Ü§ d) ‚àò (a ‚Ü§ b)) rn‚ÇÉ ]
      (b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ c)((d ‚Ü§ a)x)))
    ‚â°[ ap (b ‚Ü§ d) (rn‚ÇÑ {a = b} {a} {c} {d}) ]
      (b ‚Ü§ d)((d ‚Ü§ c)((a ‚Ü§ b)((d ‚Ü§ a)x)))
    ‚â°[ rn‚ÇÉ ]
      (b ‚Ü§ c)((b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)x)))
    ‚â°[ ap (b ‚Ü§ c) (symm (‚âÄ‚Çê‚Çêfresh a b d x)) ]
      (b ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)
    qed

  ts‚Çà : -- Equation (38)
    {x : X}
    {a b c : ùî∏}
    {{_ : b ‚â† c}}
    {{_ : c ‚â† a}}
    ‚Üí ---------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((c ‚Ü§ a)x) ‚â° (c ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚Çà {x} {a} {b} {c} with b ‚âê a
  ... | equ =
    proof
      (a ‚âÄ‚Çê‚Çê a)((c ‚Ü§ a)x)
    ‚â°[ ts‚ÇÅ ]
      (c ‚Ü§ a)x
    ‚â°[ ap (c ‚Ü§ a) (symm ts‚ÇÅ) ]
      (c ‚Ü§ a)((a ‚âÄ‚Çê‚Çê a)x)
    qed
  ... | neq f =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ –òe‚ÇÅ (asupp x)
      d = new as
      instance
        _ : d # x
        _ = –òe‚ÇÇ (asupp x) d {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as)))}}
        _ : d ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as))
        _ : d ‚â† b
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as)))
        _ : d ‚â† c
        _ =  ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as))))
        _ : d # (c ‚Ü§ a)x
        _ = #‚Ü§ x a c d
        _ :  a ‚â† c
        _ = symm‚â† c a it
        _ : d # (a ‚Ü§ b)((c ‚Ü§ a)x)
        _ = #‚Ü§ _ b a d
        _ : b ‚â† a
        _ = ¬¨‚â°‚Üí‚â†  f
        _ : c ‚â† b
        _ = symm‚â† b c it
        _ : a ‚â† d
        _ = symm‚â† d a it
    in
    proof
      (a ‚âÄ‚Çê‚Çê b)((c ‚Ü§ a)x)
    ‚â°[ ‚âÄ‚Çê‚Çêfresh a b d ((c ‚Ü§ a)x) ]
      (b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)((c ‚Ü§ a)x)))
    ‚â°[ ap ((b ‚Ü§ d) ‚àò (a ‚Ü§ b)) (rn‚ÇÇ {a = a} {d} {c}) ]
      (b ‚Ü§ d)((a ‚Ü§ b)((c ‚Ü§ a)x))
    ‚â°[ #‚Üíren# it b ]
      (a ‚Ü§ b)((c ‚Ü§ a)x)
    ‚â°[ ap ((a ‚Ü§ b) ‚àò (c ‚Ü§ a)) (symm (#‚Üíren# it c)) ]
      (a ‚Ü§ b)((c ‚Ü§ a)((c ‚Ü§ d)x))
    ‚â°[ ap (a ‚Ü§ b) (symm rn‚ÇÉ) ]
      (a ‚Ü§ b)((c ‚Ü§ d)((d ‚Ü§ a)x))
    ‚â°[ symm (rn‚ÇÑ {a = d} {c} {b} {a}) ]
      (c ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)x))
    ‚â°[ ap (c ‚Ü§ d) (symm (rn‚ÇÇ {a = b}{c}{a})) ]
      (c ‚Ü§ d)((c ‚Ü§ b)((a ‚Ü§ b)((d ‚Ü§ a)x)))
    ‚â°[ symm rn‚ÇÉ ]
      (c ‚Ü§ b)((b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)x)))
    ‚â°[ ap (c ‚Ü§ b) (symm (‚âÄ‚Çê‚Çêfresh a b d x)) ]
      (c ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x)
    qed

  ts‚Çâ : -- Equation (39)
    {x : X}
    {a b : ùî∏}
    ‚Üí ---------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((b ‚Ü§ a)x) ‚â° (a ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚Çâ {x} {a} {b} with  b ‚âê a
  ... | equ =
    proof
      (a ‚âÄ‚Çê‚Çê a)((a ‚Ü§ a)x)
    ‚â°[ ts‚ÇÅ ]
      (a ‚Ü§ a)x
    ‚â°[ ap (a ‚Ü§ a) (symm ts‚ÇÅ) ]
      (a ‚Ü§ a)((a ‚âÄ‚Çê‚Çê a)x)
    qed
  ... | neq f =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ –òe‚ÇÅ (asupp x)
      c = new as
      instance
        _ : c # x
        _ = –òe‚ÇÇ (asupp x) c {{‚àâ‚à™‚ÇÇ (‚àâ‚à™‚ÇÇ (unfinite as))}}
        _ : c ‚â† a
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (unfinite as))
        _ : c ‚â† b
        _ = ‚àâ[]‚ÇÅ (‚àâ‚à™‚ÇÅ (‚àâ‚à™‚ÇÇ (unfinite as)))
        _ : c # (b ‚Ü§ a)x
        _ = #‚Ü§ x a b c
        _ : b ‚â† a
        _ = ¬¨‚â°‚Üí‚â†  f
        _ : a ‚â† b
        _ = symm‚â† b a it
        _ : c # (a ‚Ü§ b)x
        _ = #‚Ü§ x b a c
        _ : a ‚â† c
        _ = symm‚â† c a it
    in
    proof
      (a ‚âÄ‚Çê‚Çê b)((b ‚Ü§ a)x)
    ‚â°[ ‚âÄ‚Çê‚Çêfresh a b c ((b ‚Ü§ a)x) ]
      (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)((b ‚Ü§ a)x)))
    ‚â°[ ap ((b ‚Ü§ c) ‚àò (a ‚Ü§ b)) (rn‚ÇÇ {a = a} {c} {b}) ]
      (b ‚Ü§ c)((a ‚Ü§ b)((b ‚Ü§ a)x))
    ‚â°[ ap (b ‚Ü§ c) rn‚ÇÉ ]
      (b ‚Ü§ c)((a ‚Ü§ a)((a ‚Ü§ b)x))
    ‚â°[ ap (b ‚Ü§ c) rn‚ÇÅ ]
      (b ‚Ü§ c)((a ‚Ü§ b)x)
    ‚â°[ #‚Üíren# it b ]
      (a ‚Ü§ b)x
    ‚â°[ ap (a ‚Ü§ b) (symm (#‚Üíren# it a)) ]
      (a ‚Ü§ b)((a ‚Ü§ c)x)
    ‚â°[ ap (a ‚Ü§ b) (symm rn‚ÇÅ) ]
      (a ‚Ü§ b)((a ‚Ü§ a)((a ‚Ü§ c)x))
    ‚â°[ ap (a ‚Ü§ b) (symm rn‚ÇÉ) ]
      (a ‚Ü§ b)((a ‚Ü§ c)((c ‚Ü§ a)x))
    ‚â°[ symm (rn‚ÇÑ {a = c} {a} {b} {a}) ]
      (a ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x))
    ‚â°[ ap (a ‚Ü§ c) (symm (rn‚ÇÇ {a = b} {a} {a})) ]
      (a ‚Ü§ c)((a ‚Ü§ b)((a ‚Ü§ b)((c ‚Ü§ a)x)))
    ‚â°[ symm rn‚ÇÉ ]
      (a ‚Ü§ b)((b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x)))
    ‚â°[ ap (a ‚Ü§ b) (symm (‚âÄ‚Çê‚Çêfresh a b c x)) ]
      (a ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x)
    qed
