module AbstractionConcretion where

open import Prelude
open import Unfinite
open import oc-Sets
open import Freshness
open import LocalClosedness
open import Support

----------------------------------------------------------------------
-- Locally closed part of an oc-set [Definition 2.14]
----------------------------------------------------------------------
lc : (i : ‚Ñï)(X : Set){{_ : oc X}} ‚Üí Set
lc i X = ‚àë x ‚à∂ X , i ‚âª x

----------------------------------------------------------------------
-- Abstraction & Concretion [Equation (13)]
----------------------------------------------------------------------
module _ {X : Set}{{_ : lns X}} where
  abs : ùî∏ ‚Üí X ‚Üí X     -- paper's notation: \·µÉx
  abs a x = (0 <~ a)x

  conc : X ‚Üí ùî∏ ‚Üí X    -- paper's notation: x·µÉ
  conc x a = (0 ~> a)x

  conc-lc : ‚àÄ x a ‚Üí 1 ‚âª x ‚Üí 0 ‚âª conc x a -- Equation (14)
  conc-lc _ _ = ~>index-supports'

  abs-lc : ‚àÄ a x ‚Üí 0 ‚âª x ‚Üí 1 ‚âª abs a x -- Equation (15)
  abs-lc _ _ = <~index-supports

  abs-conc : ‚àÄ a x ‚Üí (_ : a # x) ‚Üí abs a (conc x a) ‚â° x -- Equation (16)
  abs-conc _ _ = close-open-var

  conc-abs : ‚àÄ a x ‚Üí (_ : 0 ‚âª x) ‚Üí conc (abs a x) a ‚â° x -- Equation (17)
  conc-abs _ _ = open-close-var

----------------------------------------------------------------------
-- "Body" predicate [Remark 2.15]
----------------------------------------------------------------------
module Body {X : Set}{{_ : lns X}} where
  body : X ‚Üí Set
  body x = –ò a ‚à∂ ùî∏ , 0 ‚âª conc x a

  body‚Üí1‚âª : ‚àÄ x ‚Üí body x ‚Üí 1 ‚âª x -- Equation (18)
  body‚Üí1‚âª x p with (a , ‚àâ‚à™) ‚Üê fresh{ùî∏} (–òe‚ÇÅ (asupp x) ‚à™ –òe‚ÇÅ p) =
    subst (1 ‚âª_) (abs-conc a x (–òe‚ÇÇ (asupp x) a))
    (abs-lc a (conc x a) (–òe‚ÇÇ p a))

  1‚âª‚Üíbody : ‚àÄ x ‚Üí 1 ‚âª x ‚Üí body x -- Equation (18), cont.
  1‚âª‚Üíbody x p = –òi √ò Œª a ‚Üí conc-lc x a p
