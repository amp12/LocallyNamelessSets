module Support where

open import Prelude
open import Unfinite
open import oc-Sets
open import Freshness
open import LocalClosedness

----------------------------------------------------------------------
-- Locally nameless sets [Definition 2.9]
----------------------------------------------------------------------
record lns (X : Set) : Set where
  constructor mklns
  field
    {{ocSet}} : oc X
    asupp : (x : X) ‚Üí –ò a ‚à∂ ùî∏ , a # x
    isupp : (x : X) ‚Üí ‚àë i ‚à∂ ‚Ñï , i ‚âª x

open lns{{...}} public

infix 4 _atom-supports_
_atom-supports_ :
  {X : Set}
  {{_ : oc X}}
  (A : Fset ùî∏)
  (x : X)
  ‚Üí ----------
  Set
A atom-supports x = ‚àÄ a ‚Üí a ‚àâ A ‚Üí a # x

----------------------------------------------------------------------
-- Locally nameless set of indices and atoms [Example 2.10]
----------------------------------------------------------------------
instance
  lns‚Ñïùî∏ : lns ‚Ñïùî∏
  ocSet {{lns‚Ñïùî∏}} = oc‚Ñïùî∏
  asupp {{lns‚Ñïùî∏}} (Œπ‚ÇÅ i) = –òi √ò Œª _ ‚Üí refl
  asupp {{lns‚Ñïùî∏}} (Œπ‚ÇÇ a) = –òi [ a ] –∏‚ÇÇ
    where
    –∏‚ÇÇ : (b : ùî∏){{_ : b ‚àâ [ a ]}} ‚Üí b # Œπ‚ÇÇ a
    –∏‚ÇÇ b {{‚àâ[]{{p}}}} rewrite p = refl
  isupp {{lns‚Ñïùî∏}} (Œπ‚ÇÅ i) = (i +1 , s‚ÇÇ)
    where
    s‚ÇÇ : i +1 ‚âª Œπ‚ÇÅ i
    s‚ÇÇ j {{p}} rewrite +1‚â§‚Üí‚â† i j p = (new √ò , refl)
  isupp {{lns‚Ñïùî∏}} (Œπ‚ÇÇ a) = (0 , Œª _ ‚Üí (a , refl))

----------------------------------------------------------------------
-- Properties of open/close operations wrt freshness [Lemma 2.12]
----------------------------------------------------------------------
module _
  {X : Set}
  {{_ : oc X}}
  {i : ‚Ñï}
  {a : ùî∏}
  {A : Fset ùî∏}
  {x : X}
  (f : A atom-supports x)
  where
  ~>atom-supports : A ‚à™ [ a ] atom-supports (i ~> a)x
  ~>atom-supports b (‚àâ‚à™{{_}}{{‚àâ[]}}) =
    #1 {i = i +1}{0}
    (proof
       ((i +1) <~ b) ((i ~> a) x)
     ‚â°[ symm (oc‚Çá i (i +1) a b x {{ ‚â†+1 i}} {{symm‚â† b a it}}) ]
       (i ~> a) ((i +1 <~ b)x)
     ‚â°[ ap (i ~> a) (#1 {j = i +1} (f b it)) ]
       (i ~> a) x
     qed)

  <~atom-supports : A -[ a ] atom-supports (i <~ a)x
  <~atom-supports b p with b ‚âê a
  ... | neq g =
    proof
      (0 <~ b) ((i <~ a) x)
    ‚â°[ oc‚ÇÜ 0 i b a x {{¬¨‚â°‚Üí‚â† g}} ]
      (i <~ a) ((0 <~ b)x)
    ‚â°[ ap (i <~ a) (f b (‚àâ-[] p (¬¨‚â°‚Üí‚â† g))) ]
      (i <~ a) x
    qed
  ... | equ = oc‚ÇÇ 0 i b x

#<~ :
  {X : Set}
  {{_ : lns X}}
  (i : ‚Ñï)
  (a b : ùî∏)
  (x : X)
  {{_ : a # x}}
  ‚Üí -----------
  a # (i <~ b)x
#<~ i a b x with a ‚âê b
... | equ = oc‚ÇÇ _ _ _ _
... | neq f =
  proof
    (0 <~ a) ((i <~ b) x)
  ‚â°[ oc‚ÇÜ _ _ _ _ _ {{¬¨‚â°‚Üí‚â† f}} ]
    (i <~ b) ((0 <~ a) x)
  ‚â°[ ap (i <~ b) (#2 it) ]
    (i <~ b)x
  qed

#~> :
  {X : Set}
  {{_ : lns X}}
  (i : ‚Ñï)
  (a b : ùî∏)
  (x : X)
  {{_ : a # x}}
  {{_ : a ‚â† b}}
  ‚Üí -----------
  a # (i ~> b)x
#~> i a b x = #3 {i = i +1}
  (proof
     (i +1 <~ a)((i ~> b)x)
   ‚â°[ symm (oc‚Çá _ _ _ _ _ {{‚â†+1 i}}{{symm‚â† a b it}}) ]
     (i ~> b)((i +1 <~ a)x)
   ‚â°[ ap (i ~> b) (#2 it) ]
     (i ~> b)x
   qed)


----------------------------------------------------------------------
-- Properties of open/close operations wrt local closure [Lemma 2.13]
----------------------------------------------------------------------
module _
  {X : Set}
  {{_ : oc X}}
  {i : ‚Ñï}
  {a : ùî∏}
  {x : X}
  where
  ~>index-supports : -- Equation (10)
    {j : ‚Ñï}
    (_ : j ‚âª x)
    ‚Üí -----------
    j ‚âª (i ~> a)x
  ~>index-supports p k with k ‚âê i
  ... | neq f = (a ,
    (proof
       (k ~> a)((i ~> a) x)
     ‚â°[ oc‚ÇÖ _ _ _ _ _ {{¬¨‚â°‚Üí‚â† f}} ]
       (i ~> a)((k ~> a) x)
     ‚â°[ ap (i ~> a) (‚âª3 p it) ]
       (i ~> a) x
     qed))
  ... | equ = (a , oc‚ÇÅ _ _ _ _)

  ~>index-supports' : -- Equation (11)
    i +1 ‚âª x ‚Üí i ‚âª (i ~> a) x
  ~>index-supports' p j with j ‚âê i
  ... | neq f = (a ,
    (proof
       (j ~> a)((i ~> a) x)
     ‚â°[ oc‚ÇÖ _ _ _ _ _ {{¬¨‚â°‚Üí‚â† f}}  ]
       (i ~> a) ((j ~> a) x)
     ‚â°[ ap (i ~> a) (‚âª3 p (‚â§‚â† it (symm‚â† j i (¬¨‚â°‚Üí‚â† f)))) ]
       (i ~> a) x
     qed))
  ... | equ = (a , oc‚ÇÅ _ _ _ _)

  <~index-supports : -- Equation (12)
    {j : ‚Ñï}
    (_ : j ‚âª x)
    ‚Üí ------------------------
    max j (i +1) ‚âª (i <~ a) x
  <~index-supports p k with (b , ‚àâ[]) ‚Üê fresh{ùî∏} [ a ] =
    (b ,
      (proof
        (k ~> b)((i <~ a) x)
      ‚â°[ oc‚Çá _ _ _ _ _ {{+1‚â§‚Üí‚â† i k (‚â§trans ‚â§max‚ÇÇ it)}} ]
        (i <~ a)((k ~> b) x)
      ‚â°[ ap (i <~ a) (‚âª3 p (‚â§trans ‚â§max‚ÇÅ it)) ]
        (i <~ a) x
      qed))
